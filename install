#!/usr/bin/env bash

set -euo pipefail

log() {
    case $1 in
        ERROR|error)
        printf "ERROR::: $@\n"
        exit 1
        ;;
        INFO|info)
        printf "INFO::: $@\n"
        ;;
        WARN|warn)
        printf "WARN::: $@\n"
        ;;
        *)
        printf "INFO::: $@\n"
        ;;
    esac
}

## git configuration
log info "Configuring git"
git config --global push.autoSetupRemote true

#@--------------------------------@#
# Check if homebrew is installed
#@--------------------------------@#
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

if ! command -v brew &> /dev/null
then
    log info "Homebrew not found. Installing.."
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
else
    log info "Installing fzf, bat, tree, jq, mycli, helm, pass"
    HOMEBREW_NO_AUTO_UPDATE=1 brew install fzf bat tree jq mycli helm pass

    #@--------------------------------@#
    # Configure fzf
    #   - Install keybindings
    #   - Install shell completion
    #   - Do not update shell configuration files
    #@--------------------------------@#
    log info "Configuring fzf keybindings and shell completion"
    "$(brew --prefix)"/opt/fzf/install --key-bindings --completion
fi

#@--------------------------------@#
# Download tools
#@--------------------------------@#
if ! command -v eza &> /dev/null
then
    log info "eza already installed. skipping.."
else
    log info "Downloading eza"
    EZA_RELEASE_ASSET="eza_x86_64-unknown-linux-gnu.tar.gz" && \
        gh release \
        download -R eza-community/eza --clobber -D /tmp -p "$EZA_RELEASE_ASSET" && \
        tar -xvf /tmp/"$EZA_RELEASE_ASSET" -C /tmp && \
        sudo mv /tmp/eza /usr/local/bin/eza && \
        sudo chmod +x /usr/local/bin/eza
fi

# Move lnav
sudo cp tools/lnav /usr/local/bin/lnav && \
    sudo chmod +x /usr/local/bin/lnav

#@--------------------------------@#
# Configuring vim and tmux
#@--------------------------------@#
log info "Installing vim pathogen"
mkdir -p ~/.vim/autoload ~/.vim/bundle && \
curl -LSso ~/.vim/autoload/pathogen.vim https://raw.githubusercontent.com/tpope/vim-pathogen/master/autoload/pathogen.vim

log info "Installing apprentice theme"
git clone https://github.com/romainl/Apprentice.git ~/.vim/bundle/apprentice

log info "Copying .vimrc"
cp .vimrc ~/.vimrc

log info "Copying .tmux.conf"
cp .tmux.conf ~/.tmux.conf

#@--------------------------------@#
# Codespaces specific
#@--------------------------------@#
echo "Updating PATH for zsh"
{
    echo "PATH=$PATH:$(brew --prefix)/bin:/home/vscode/.local/bin";
    echo "alias dotfiles='cd /workspaces/.codespaces/.persistedshare/dotfiles'";
    echo "alias k='kubectl'";
    echo "alias ll='eza -la -g'";
    echo "alias l='eza -la -g'";
    # echo "alias logout='unset GITHUB_TOKEN'"
} >> ~/.zshrc

# Set theme
log info "Switching theme to minimal"
omz theme use minimal || true
# Install autosuggestions
log info "Installing zsh-autosuggestions"
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions


#@--------------------------------@#
# Adding auto-completions
#@--------------------------------@#
# Kubectl completions
kubectl completion zsh > "${fpath[1]}/_kubectl" || true
# Helm completions
helm completion zsh > "${fpath[1]}/_helm" || true

#@--------------------------------@#
# Create a GPG key
#@--------------------------------@#
export GPG_TTY="$(tty)"
log info "Generating GPG key"
gpg --batch --generate-key < .pass_key.metadata
log info "Listing GPG keys"
gpg --list-secret-keys --keyid-format LONG
