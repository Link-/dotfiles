# Configuration for Git Large File Storage (LFS)
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

# Sets the default branch name when initializing a new repository
[init]
	defaultBranch = main

# Makes git pull use rebase instead of merge by default
[pull]
	rebase = true

[alias]
	# View abbreviated SHA, description, and history graph of the latest 20 commits.
	l = log --pretty=oneline -n 20 --graph --abbrev-commit
	
	# Show the diff between the latest commit and the current state.
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state.
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	
	# Show the diff between HEAD and the main branch
	progress = !"git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short $1.."
	
	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch --all
	remotes = remote --verbose
	
	# Amend the currently staged files to the latest commit.
	amend = commit --amend --reuse-message=HEAD
	
	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"
	
	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"
	
	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	
	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --regexp-ignore-case --grep=\"$1\"; }; f"
	
	# Remove branches that have already been merged with main.
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
	
	# List contributors with number of commits.
	contributors = shortlog --summary --numbered
	
	# Soft reset to undo last commit while keeping changes staged
	undo = "!git reset --soft HEAD^"
	
	# Quickly commit all changes as work in progress
	wip = "!git add --all; git ci -m WIP"
	
	# Create an empty commit with a message
	empty = "!f() { git commit --allow-empty -m \"$1\"; }; f"

# Automatically sets up remote tracking when pushing a new branch
[push]
	autoSetupRemote = true

# Sets VS Code as the default editor for git commit messages
[core]
	editor = code --wait

# Displays branch and tag lists in columns for better readability
[column]
	ui = auto

# Sorts branches by most recent commit date
[branch]
	sort = -committerdate

# Sorts tags by version number instead of alphabetically
[tag]
	sort = version:refname

# Improves diff output with better algorithms and visualization
[diff]
	algorithm = histogram
	colorMoved = plain
	mnemonicPrefix = true
	renames = true

# Prompts to autocorrect mistyped Git commands
[help]
	autocorrect = prompt

# Shows diff in commit message editor
[commit]
	verbose = true

# Enhances rebase operations with automatic stashing and reference updates
[rebase]
	autoSquash = true
	autoStash = true
	updateRefs = true
